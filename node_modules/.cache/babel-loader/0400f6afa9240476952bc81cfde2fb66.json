{"ast":null,"code":"import _classCallCheck from \"/Users/piusandru/Desktop/REACT/graphql_rev/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/piusandru/Desktop/REACT/graphql_rev/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/piusandru/Desktop/REACT/graphql_rev/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/piusandru/Desktop/REACT/graphql_rev/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/piusandru/Desktop/REACT/graphql_rev/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/Users/piusandru/Desktop/REACT/graphql_rev/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/piusandru/Desktop/REACT/graphql_rev/src/App.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n{\\n  posts {\\n   id\\n   title\\n   body\\n  }\\n }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider, Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport './App.css'; // setting up client\n\nvar client = new ApolloClient({\n  uri: 'https://api-useast.graphcms.com/v1/cjs43zffl1ixr01gfikmzpp5v/master'\n}); // writing the first query\n\nvar POSTS_QUERY = gql(_templateObject()); // testing if our client is connected by runnu=ing query out of react\n\nclient.query({\n  query: testQuery\n}).then(function (res) {\n  return console.log(res);\n});\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return (// use ApolloProvider to connected to the client\n        React.createElement(ApolloProvider, {\n          client: client,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"App\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        }, React.createElement(Query, {\n          query: POSTS_QUERY,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        }, function (_ref) {\n          var loading = _ref.loading,\n              data = _ref.data;\n          if (loading) return 'Loading...';\n          var posts = data.posts;\n        })))\n      );\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/piusandru/Desktop/REACT/graphql_rev/src/App.js"],"names":["React","Component","ApolloClient","ApolloProvider","Query","gql","client","uri","POSTS_QUERY","query","testQuery","then","res","console","log","App","loading","data","posts"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,cAAT,EAAyBC,KAAzB,QAAsC,cAAtC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,OAAO,WAAP,C,CAEA;;AACA,IAAMC,MAAM,GAAG,IAAIJ,YAAJ,CAAiB;AAC9BK,EAAAA,GAAG,EAAE;AADyB,CAAjB,CAAf,C,CAIA;;AACA,IAAMC,WAAW,GAAGH,GAAH,mBAAjB,C,CASA;;AACAC,MAAM,CAACG,KAAP,CAAa;AACXA,EAAAA,KAAK,EAAEC;AADI,CAAb,EAGGC,IAHH,CAGQ,UAAAC,GAAG;AAAA,SAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ;AAAA,CAHX;;IAOMG,G;;;;;;;;;;;;;6BACK;AACP,aACE;AACA,4BAAC,cAAD;AAAgB,UAAA,MAAM,EAAET,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAK,UAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAEE,oBAAC,KAAD;AAAO,UAAA,KAAK,EAAEE,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACG,gBAAuB;AAAA,cAApBQ,OAAoB,QAApBA,OAAoB;AAAA,cAAXC,IAAW,QAAXA,IAAW;AACtB,cAAID,OAAJ,EAAa,OAAO,YAAP;AADS,cAEdE,KAFc,GAEJD,IAFI,CAEdC,KAFc;AAGvB,SAJH,CAFF,CADF;AAFF;AAeD;;;;EAjBejB,S;;AAoBlB,eAAec,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider, Query } from 'react-apollo';\nimport gql from 'graphql-tag'\n\nimport './App.css';\n\n// setting up client\nconst client = new ApolloClient({\n  uri: 'https://api-useast.graphcms.com/v1/cjs43zffl1ixr01gfikmzpp5v/master'\n})\n\n// writing the first query\nconst POSTS_QUERY = gql`\n{\n  posts {\n   id\n   title\n   body\n  }\n }\n`\n// testing if our client is connected by runnu=ing query out of react\nclient.query({\n  query: testQuery\n})\n  .then(res => console.log(res))\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      // use ApolloProvider to connected to the client\n      <ApolloProvider client={client}>\n        <div className=\"App\">\n\n          <Query query={POSTS_QUERY}>\n            {({ loading, data }) => {\n              if (loading) return 'Loading...';\n              const { posts } = data;\n            }}\n\n          </Query>\n        </div>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}