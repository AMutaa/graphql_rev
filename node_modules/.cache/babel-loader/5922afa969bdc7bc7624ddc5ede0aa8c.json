{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/piusandru/Desktop/REACT/graphql_rev/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _objectSpread from \"/Users/piusandru/Desktop/REACT/graphql_rev/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/piusandru/Desktop/REACT/graphql_rev/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/piusandru/Desktop/REACT/graphql_rev/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/piusandru/Desktop/REACT/graphql_rev/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/piusandru/Desktop/REACT/graphql_rev/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/piusandru/Desktop/REACT/graphql_rev/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/piusandru/Desktop/REACT/graphql_rev/src/Posts/NewPost.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n mutation addPost($title: String!, $body: String! ) {\\n   createPost(data: {\\n    status: PUBLISHED\\n     title: $title\\n     body:  $body\\n   }) {\\n     title\\n     body\\n     id\\n   }\\n }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport PostForm from './PostForm';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\n\nvar NewPost =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NewPost, _Component);\n\n  function NewPost() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, NewPost);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(NewPost)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      title: '',\n      body: ''\n    };\n\n    _this.handleInput = function (e) {\n      var formData = {};\n      formData[e.target.name] = e.target.value;\n\n      _this.setState(_objectSpread({}, formData));\n    };\n\n    return _this;\n  }\n\n  _createClass(NewPost, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          title = _this$state.title,\n          body = _this$state.body;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, \"New Post\"), React.createElement(Mutation, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        name: \"title\",\n        type: \"text\",\n        onChange: this.handleInput,\n        value: title,\n        placeholder: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }), React.createElement(\"textarea\", {\n        name: \"body\",\n        type: \"text\",\n        onChange: this.handleInput,\n        value: body,\n        placeholder: \"body\",\n        id: \"\",\n        cols: \"30\",\n        rows: \"10\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, \"Submit\"))));\n    }\n  }]);\n\n  return NewPost;\n}(Component);\n\nexport { NewPost as default };\nvar NEW_POST = gql(_templateObject());","map":{"version":3,"sources":["/Users/piusandru/Desktop/REACT/graphql_rev/src/Posts/NewPost.js"],"names":["React","Component","PostForm","Mutation","gql","NewPost","state","title","body","handleInput","e","formData","target","name","value","setState","NEW_POST"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;;IAEqBC,O;;;;;;;;;;;;;;;;;UACnBC,K,GAAQ;AACNC,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,IAAI,EAAE;AAFA,K;;UAIRC,W,GAAc,UAACC,CAAD,EAAO;AACnB,UAAMC,QAAQ,GAAG,EAAjB;AACAA,MAAAA,QAAQ,CAACD,CAAC,CAACE,MAAF,CAASC,IAAV,CAAR,GAA0BH,CAAC,CAACE,MAAF,CAASE,KAAnC;;AACA,YAAKC,QAAL,mBAAmBJ,QAAnB;AACD,K;;;;;;;6BACQ;AAAA,wBACiB,KAAKL,KADtB;AAAA,UACCC,KADD,eACCA,KADD;AAAA,UACQC,IADR,eACQA,IADR;AAEP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAGE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,IAAI,EAAC,MAAzB;AAAgC,QAAA,QAAQ,EAAE,KAAKC,WAA/C;AAA4D,QAAA,KAAK,EAAEF,KAAnE;AAA0E,QAAA,WAAW,EAAC,OAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAU,QAAA,IAAI,EAAC,MAAf;AAAsB,QAAA,IAAI,EAAC,MAA3B;AAAkC,QAAA,QAAQ,EAAE,KAAKE,WAAjD;AAA8D,QAAA,KAAK,EAAED,IAArE;AAA2E,QAAA,WAAW,EAAC,MAAvF;AAA8F,QAAA,EAAE,EAAC,EAAjG;AAAoG,QAAA,IAAI,EAAC,IAAzG;AAA8G,QAAA,IAAI,EAAC,IAAnH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,CADF,CAHF,CADF;AAaD;;;;EAzBkCP,S;;SAAhBI,O;AA6BrB,IAAMW,QAAQ,GAAGZ,GAAH,mBAAd","sourcesContent":["import React, { Component } from 'react'\nimport PostForm from './PostForm'\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\n\nexport default class NewPost extends Component {\n  state = {\n    title: '',\n    body: ''\n  }\n  handleInput = (e) => {\n    const formData = {}\n    formData[e.target.name] = e.target.value\n    this.setState({ ...formData })\n  }\n  render() {\n    const { title, body } = this.state\n    return (\n      <div>\n        <h1>New Post</h1>\n        {/* <PostForm /> */}\n        <Mutation>\n          <form>\n            <input name=\"title\" type=\"text\" onChange={this.handleInput} value={title} placeholder=\"title\" />\n            <textarea name=\"body\" type=\"text\" onChange={this.handleInput} value={body} placeholder=\"body\" id=\"\" cols=\"30\" rows=\"10\" />\n            <button>Submit</button>\n          </form>\n        </Mutation>\n      </div>\n    )\n  }\n}\n\n\nconst NEW_POST = gql`\n mutation addPost($title: String!, $body: String! ) {\n   createPost(data: {\n    status: PUBLISHED\n     title: $title\n     body:  $body\n   }) {\n     title\n     body\n     id\n   }\n }\n`"]},"metadata":{},"sourceType":"module"}